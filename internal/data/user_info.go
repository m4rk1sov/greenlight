package data

import (
	"context"
	"crypto/sha256"
	"database/sql"
	"errors"
	"golang.org/x/crypto/bcrypt"
	"greenlight.m4rk1sov.github.com/internal/validator"
	"time"
)

// Define a custom ErrDuplicateEmail2 error.
var (
	ErrDuplicateEmail2 = errors.New("duplicate email")
)

// Declare a new AnonymousUser variable.
var AnonymousUser2 = &UserInfo{}

// Define a UserInfo struct to represent an individual user. Importantly, notice how we are
// using the json:"-" struct tag to prevent the Password and Version fields appearing in
// any output when we encode it to JSON. Also notice that the Password field uses the
// custom passwordHash type defined below.
type UserInfo struct {
	ID           int64        `json:"id"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
	Name         string       `json:"name"`
	Surname      string       `json:"surname"`
	Email        string       `json:"email"`
	Role         string       `json:"role"`
	PasswordHash passwordHash `json:"-"`
	Activated    bool         `json:"activated"`
	Version      int          `json:"-"`
}

// Check if a UserInfo instance is the AnonymousUser.
func (u *UserInfo) IsAnonymous2() bool {
	return u == AnonymousUser2
}

// Create a custom passwordHash type which is a struct containing the plaintext and hashed
// versions of the passwordHash for a user. The plaintext field is a *pointer* to a string,
// so that we're able to distinguish between a plaintext passwordHash not being present in
// the struct at all, versus a plaintext passwordHash which is the empty string "".
type passwordHash struct {
	plaintext *string
	hash      []byte
}

// The Set() method calculates the bcrypt hash of a plaintext passwordHash, and stores both
// the hash and the plaintext versions in the struct.
func (p *passwordHash) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return err
	}
	p.plaintext = &plaintextPassword
	p.hash = hash
	return nil
}

// The Matches() method checks whether the provided plaintext passwordHash matches the
// hashed passwordHash stored in the struct, returning true if it matches and false
// otherwise.
func (p *passwordHash) Matches(plaintextPassword string) (bool, error) {
	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}

func ValidateEmail2(v *validator.Validator, email string) {
	v.Check(email != "", "email", "must be provided")
	v.Check(validator.Matches(email, validator.EmailRX), "email", "must be a valid email address")
}
func ValidatePasswordPlaintext2(v *validator.Validator, password string) {
	v.Check(password != "", "passwordHash", "must be provided")
	v.Check(len(password) >= 8, "passwordHash", "must be at least 8 bytes long")
	v.Check(len(password) <= 72, "passwordHash", "must not be more than 72 bytes long")
}
func ValidateUser2(v *validator.Validator, user *UserInfo) {
	v.Check(user.Name != "", "name", "must be provided")
	v.Check(len(user.Name) <= 500, "name", "must not be more than 500 bytes long")
	v.Check(user.Surname != "", "surname", "must be provided")
	v.Check(len(user.Surname) <= 500, "surname", "must not be more than 500 bytes long")
	// Call the standalone ValidateEmail() helper.
	ValidateEmail2(v, user.Email)
	// If the plaintext passwordHash is not nil, call the standalone
	// ValidatePasswordPlaintext() helper.
	if user.PasswordHash.plaintext != nil {
		ValidatePasswordPlaintext2(v, *user.PasswordHash.plaintext)
	}
	// If the passwordHash hash is ever nil, this will be due to a logic error in our
	// codebase (probably because we forgot to set a passwordHash for the user). It's a
	// useful sanity check to include here, but it's not a problem with the data
	// provided by the client. So rather than adding an error to the validation map we
	// raise a panic instead.
	if user.PasswordHash.hash == nil {
		panic("missing passwordHash hash for user")
	}
}

// Create a UserInfoModel struct which wraps the connection pool.
type UserInfoModel struct {
	DB *sql.DB
}

// Insert a new record in the database for the user. Note that the id, created_at and
// version fields are all automatically generated by our database, so we use the
// RETURNING clause to read them into the UserInfo struct after the insert, in the same way
// that we did when creating a movie.
func (m UserInfoModel) Insert(user *UserInfo) error {
	query := `
 INSERT INTO user_info (fname, sname, email, password_hash, activated) 
VALUES ($1, $2, $3, $4, $5)
 RETURNING id, created_at, updated_at, user_role, version`
	args := []any{user.Name, user.Surname, user.Email, user.PasswordHash.hash, user.Activated}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	// If the table already contains a record with this email address, then when we try
	// to perform the insert there will be a violation of the UNIQUE "users_email_key"
	// constraint that we set up in the previous chapter. We check for this error
	// specifically, and return custom ErrDuplicateEmail2 error instead.
	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.ID, &user.CreatedAt, &user.UpdatedAt, &user.Role, &user.Version)
	if err != nil {
		switch {
		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
			return ErrDuplicateEmail2
		default:
			return err
		}
	}
	return nil
}

// Retrieve the UserInfo details from the database based on the user's email address.
// Because we have a UNIQUE constraint on the email column, this SQL query will only
// return one record (or none at all, in which case we return a ErrRecordNotFound error).
func (m UserInfoModel) GetByEmail(email string) (*UserInfo, error) {
	query := `
        SELECT id, created_at, updated_at, fname, sname, email, password_hash, user_role, activated, version
        FROM user_info
        WHERE email = $1`
	var user UserInfo
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	err := m.DB.QueryRowContext(ctx, query, email).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.UpdatedAt,
		&user.Name,
		&user.Surname,
		&user.Email,
		&user.PasswordHash.hash,
		&user.Role,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	return &user, nil
}

// Update the details for a specific user. Notice that we check against the version
// field to help prevent any race conditions during the request cycle, just like we did
// when updating a movie. And we also check for a violation of the "users_email_key"
// constraint when performing the update, just like we did when inserting the user
// record originally.
func (m UserInfoModel) Update(user *UserInfo) error {
	query := `
        UPDATE user_info 
        SET fname = $1, sname = $2, email = $3, password_hash = $4, activated = $5, version = version + 1, updated_at = NOW()
        WHERE id = $6 AND version = $7
        RETURNING version`
	args := []any{
		user.Name,
		user.Surname,
		user.Email,
		user.PasswordHash.hash,
		user.Activated,
		user.ID,
		user.Version,
	}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.Version)
	if err != nil {
		switch {
		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
			return ErrDuplicateEmail2
		case errors.Is(err, sql.ErrNoRows):
			return ErrEditConflict
		default:
			return err
		}
	}
	return nil
}

func (m UserInfoModel) GetForToken(tokenScope, tokenPlaintext string) (*UserInfo, error) {
	// Calculate the SHA-256 hash of the plaintext token provided by the client.
	// Remember that this returns a byte *array* with length 32, not a slice.
	tokenHash := sha256.Sum256([]byte(tokenPlaintext))
	// Set up the SQL query.
	query := `
        SELECT user_info.id, user_info.created_at, user_info.updated_at, user_info.fname, user_info.sname, user_info.email, user_info.password_hash, user_info.user_role, user_info.activated, user_info.version
        FROM user_info
        INNER JOIN tokens
        ON user_info.id = tokens.user_id
        WHERE tokens.hash = $1
        AND tokens.scope = $2 
        AND tokens.expiry > $3`
	// Create a slice containing the query arguments. Notice how we use the [:] operator
	// to get a slice containing the token hash, rather than passing in the array (which
	// is not supported by the pq driver), and that we pass the current time as the
	// value to check against the token expiry.
	args := []any{tokenHash[:], tokenScope, time.Now()}
	var user UserInfo
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	// Execute the query, scanning the return values into a UserInfo struct. If no matching
	// record is found we return an ErrRecordNotFound error.
	err := m.DB.QueryRowContext(ctx, query, args...).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.UpdatedAt,
		&user.Name,
		&user.Surname,
		&user.Email,
		&user.PasswordHash.hash,
		&user.Role,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	// Return the matching user.
	return &user, nil
}
